{
    "sourceFile": "src/Entity/Responsable.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1752131472531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752131479570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n      */\n     #[ORM\\Column]\n     private array $roles = [];\n \n-        #[ORM\\Column(type: 'json')]\n     private array $roles = [];\n \n \n     /**\n"
                },
                {
                    "date": 1752131484879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,14 @@\n \n     /**\n      * @var list<string> The user roles\n      */\n-    #[ORM\\Column]\n-    private array $roles = [];\n \n-    private array $roles = [];\n+        #[ORM\\Column(type: 'json')]    private array $roles = [];\n \n \n+\n+\n     /**\n      * @var string The hashed password\n      */\n     #[ORM\\Column]\n"
                },
                {
                    "date": 1752131523393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n     /**\n      * @var list<string> The user roles\n      */\n \n-        #[ORM\\Column(type: 'json')]    private array $roles = [];\n+        #[ORM\\Column(type: 'json')]\n+        private array $roles = [];\n \n \n \n \n@@ -147,5 +148,22 @@\n         $this->roleResponsable = $roleResponsable;\n \n         return $this;\n     }\n+\n+        {\n+        $roles = $this->roles;\n+\n+        // Garantit qu’un utilisateur a au moins ROLE_VISITEUR\n+        $roles[] = 'ROLE_VISITEUR';\n+\n+        return array_unique($roles);\n+    }\n+\n+    public function setRoles(array $roles): self\n+    {\n+        $this->roles = $roles;\n+\n+        return $this;\n+    }\n+\n }\n"
                },
                {
                    "date": 1752131531003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,21 +149,6 @@\n \n         return $this;\n     }\n \n-        {\n-        $roles = $this->roles;\n-\n-        // Garantit qu’un utilisateur a au moins ROLE_VISITEUR\n-        $roles[] = 'ROLE_VISITEUR';\n-\n-        return array_unique($roles);\n-    }\n-\n-    public function setRoles(array $roles): self\n-    {\n-        $this->roles = $roles;\n-\n-        return $this;\n-    }\n-\n+    \n }\n"
                },
                {
                    "date": 1752131566195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,7 +148,23 @@\n         $this->roleResponsable = $roleResponsable;\n \n         return $this;\n     }\n+       public function getRoles(): array\n+    {\n+        $roles = $this->roles;\n \n+        // Garantit qu’un utilisateur a au moins ROLE_VISITEUR\n+        $roles[] = 'ROLE_VISITEUR';\n+\n+        return array_unique($roles);\n+    }\n+\n+    public function setRoles(array $roles): self\n+    {\n+        $this->roles = $roles;\n+\n+        return $this;\n+    }\n+\n     \n }\n"
                },
                {
                    "date": 1752131626004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,14 @@\n \n     /**\n      * @var list<string> The user roles\n      */\n+    #[ORM\\Column]\n+    private array $roles = [];\n \n-        #[ORM\\Column(type: 'json')]\n-        private array $roles = [];\n+    private array $roles = [];\n \n \n-\n-\n     /**\n      * @var string The hashed password\n      */\n     #[ORM\\Column]\n@@ -148,23 +147,5 @@\n         $this->roleResponsable = $roleResponsable;\n \n         return $this;\n     }\n-       public function getRoles(): array\n-    {\n-        $roles = $this->roles;\n-\n-        // Garantit qu’un utilisateur a au moins ROLE_VISITEUR\n-        $roles[] = 'ROLE_VISITEUR';\n-\n-        return array_unique($roles);\n-    }\n-\n-    public function setRoles(array $roles): self\n-    {\n-        $this->roles = $roles;\n-\n-        return $this;\n-    }\n-\n-    \n }\n"
                },
                {
                    "date": 1752131653140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,28 @@\n \n     /**\n      * @var list<string> The user roles\n      */\n-    #[ORM\\Column]\n+     #[ORM\\Column(type: 'json')]\n     private array $roles = [];\n \n-    private array $roles = [];\n+    public function getRoles(): array\n+    {\n+        $roles = $this->roles;\n \n+        // Garantit qu’un utilisateur a au moins ROLE_VISITEUR\n+        $roles[] = 'ROLE_VISITEUR';\n \n+        return array_unique($roles);\n+    }\n+\n+    public function setRoles(array $roles): self\n+    {\n+        $this->roles = $roles;\n+\n+        return $this;\n+    }\n+\n     /**\n      * @var string The hashed password\n      */\n     #[ORM\\Column]\n"
                },
                {
                    "date": 1752131751398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,28 +21,12 @@\n \n     /**\n      * @var list<string> The user roles\n      */\n-     #[ORM\\Column(type: 'json')]\n+    #[ORM\\Column]\n     private array $roles = [];\n+    \n \n-    public function getRoles(): array\n-    {\n-        $roles = $this->roles;\n-\n-        // Garantit qu’un utilisateur a au moins ROLE_VISITEUR\n-        $roles[] = 'ROLE_VISITEUR';\n-\n-        return array_unique($roles);\n-    }\n-\n-    public function setRoles(array $roles): self\n-    {\n-        $this->roles = $roles;\n-\n-        return $this;\n-    }\n-\n     /**\n      * @var string The hashed password\n      */\n     #[ORM\\Column]\n@@ -156,10 +140,9 @@\n         return $this->roleResponsable;\n     }\n \n     public function setRoleResponsable(string $roleResponsable): static\n-    {\n-        $this->roleResponsable = $roleResponsable;\n-\n+{\n+    $this->roleResponsable = $roleResponsable;\n         return $this;\n     }\n }\n"
                },
                {
                    "date": 1752131760872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,9 @@\n     }\n \n     public function setRoleResponsable(string $roleResponsable): static\n {\n-    $this->roleResponsable = $roleResponsable;\n-        return $this;\n-    }\n+    $this->roles = [$roleResponsable];\n+\n+    return $this;\n }\n+}\n"
                },
                {
                    "date": 1752131774307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,13 +134,17 @@\n \n         return $this;\n     }\n \n-    public function getRoleResponsable(): ?string\n-    {\n-        return $this->roleResponsable;\n-    }\n+  public function getRoles(): array\n+{\n+    $roles = $this->roles;\n \n+    // Garantir un rôle minimal\n+    $roles[] = 'ROLE_VISITEUR';\n+\n+    return array_unique($roles);\n+}\n     public function setRoleResponsable(string $roleResponsable): static\n {\n     $this->roles = [$roleResponsable];\n \n"
                },
                {
                    "date": 1752131790293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,16 +71,17 @@\n     /**\n      * @see UserInterface\n      */\n     public function getRoles(): array\n-    {\n-        $roles = $this->roles;\n-        // guarantee every user at least has ROLE_USER\n-        $roles[] = 'ROLE_USER';\n+{\n+    $roles = $this->roles;\n \n-        return array_unique($roles);\n-    }\n+    // Garantir un rôle minimal\n+    $roles[] = 'ROLE_VISITEUR';\n \n+    return array_unique($roles);\n+}\n+\n     /**\n      * @param list<string> $roles\n      */\n     public function setRoles(array $roles): static\n@@ -134,17 +135,13 @@\n \n         return $this;\n     }\n \n-  public function getRoles(): array\n-{\n-    $roles = $this->roles;\n+    public function getRoleResponsable(): ?string\n+    {\n+        return $this->roleResponsable;\n+    }\n \n-    // Garantir un rôle minimal\n-    $roles[] = 'ROLE_VISITEUR';\n-\n-    return array_unique($roles);\n-}\n     public function setRoleResponsable(string $roleResponsable): static\n {\n     $this->roles = [$roleResponsable];\n \n"
                },
                {
                    "date": 1752131875757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n #[ORM\\Entity(repositoryClass: ResponsableRepository::class)]\n #[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]\n class Responsable implements UserInterface, PasswordAuthenticatedUserInterface\n {\n+    \n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n"
                },
                {
                    "date": 1752131882045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,15 @@\n #[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]\n class Responsable implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     \n+    public const ROLE_VISITEUR = 'ROLE_VISITEUR';\n+    public const ROLE_CLIENT = 'ROLE_CLIENT';\n+    public const ROLE_RESPONSABLE_CATALOGUE = 'ROLE_RESPONSABLE_CATALOGUE';\n+    public const ROLE_RESPONSABLE_LOGISTIQUE = 'ROLE_RESPONSABLE_LOGISTIQUE';\n+    public const ROLE_RESPONSABLE_FORMATION_INTER = 'ROLE_RESPONSABLE_FORMATION_INTER';\n+    public const ROLE_ADMIN = 'ROLE_ADMIN';\n+\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column]\n     private ?int $id = null;\n"
                },
                {
                    "date": 1752131916059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,18 +78,18 @@\n \n     /**\n      * @see UserInterface\n      */\n-    public function getRoles(): array\n-{\n-    $roles = $this->roles;\n+  public function getRoles(): array\n+    {\n+        // Toujours retourner au moins ROLE_VISITEUR par défaut\n+        $roles = $this->roles;\n+        if (empty($roles)) {\n+            $roles[] = self::ROLE_VISITEUR;\n+        }\n+        return array_unique($roles);\n+    }\n \n-    // Garantir un rôle minimal\n-    $roles[] = 'ROLE_VISITEUR';\n-\n-    return array_unique($roles);\n-}\n-\n     /**\n      * @param list<string> $roles\n      */\n     public function setRoles(array $roles): static\n"
                },
                {
                    "date": 1752149636203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n #[ORM\\Entity(repositoryClass: ResponsableRepository::class)]\n #[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]\n class Responsable implements UserInterface, PasswordAuthenticatedUserInterface\n {\n-    \n     public const ROLE_VISITEUR = 'ROLE_VISITEUR';\n     public const ROLE_CLIENT = 'ROLE_CLIENT';\n     public const ROLE_RESPONSABLE_CATALOGUE = 'ROLE_RESPONSABLE_CATALOGUE';\n     public const ROLE_RESPONSABLE_LOGISTIQUE = 'ROLE_RESPONSABLE_LOGISTIQUE';\n@@ -26,18 +25,11 @@\n \n     #[ORM\\Column(length: 180)]\n     private ?string $email = null;\n \n-    /**\n-     * @var list<string> The user roles\n-     */\n     #[ORM\\Column]\n     private array $roles = [];\n-    \n \n-    /**\n-     * @var string The hashed password\n-     */\n     #[ORM\\Column]\n     private ?string $password = null;\n \n     #[ORM\\Column(length: 255)]\n@@ -61,64 +53,46 @@\n \n     public function setEmail(string $email): static\n     {\n         $this->email = $email;\n-\n         return $this;\n     }\n \n-    /**\n-     * A visual identifier that represents this user.\n-     *\n-     * @see UserInterface\n-     */\n     public function getUserIdentifier(): string\n     {\n         return (string) $this->email;\n     }\n \n-    /**\n-     * @see UserInterface\n-     */\n-  public function getRoles(): array\n+    public function getRoles(): array\n     {\n-        // Toujours retourner au moins ROLE_VISITEUR par défaut\n         $roles = $this->roles;\n         if (empty($roles)) {\n             $roles[] = self::ROLE_VISITEUR;\n         }\n         return array_unique($roles);\n     }\n \n-    /**\n-     * @param list<string> $roles\n-     */\n     public function setRoles(array $roles): static\n     {\n         $this->roles = $roles;\n-\n         return $this;\n     }\n \n-    /**\n-     * @see PasswordAuthenticatedUserInterface\n-     */\n     public function getPassword(): ?string\n     {\n         return $this->password;\n     }\n \n     public function setPassword(string $password): static\n     {\n         $this->password = $password;\n-\n         return $this;\n     }\n \n     #[\\Deprecated]\n     public function eraseCredentials(): void\n     {\n-        // @deprecated, to be removed when upgrading to Symfony 8\n+        // Ne rien faire, à retirer pour Symfony 8\n     }\n \n     public function getNom(): ?string\n     {\n@@ -127,9 +101,8 @@\n \n     public function setNom(string $nom): static\n     {\n         $this->nom = $nom;\n-\n         return $this;\n     }\n \n     public function getPrenom(): ?string\n@@ -139,9 +112,8 @@\n \n     public function setPrenom(string $prenom): static\n     {\n         $this->prenom = $prenom;\n-\n         return $this;\n     }\n \n     public function getRoleResponsable(): ?string\n@@ -149,10 +121,9 @@\n         return $this->roleResponsable;\n     }\n \n     public function setRoleResponsable(string $roleResponsable): static\n-{\n-    $this->roles = [$roleResponsable];\n-\n-    return $this;\n+    {\n+        $this->roleResponsable = $roleResponsable;\n+        return $this;\n+    }\n }\n-}\n"
                }
            ],
            "date": 1752131472531,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ResponsableRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\n#[ORM\\Entity(repositoryClass: ResponsableRepository::class)]\n#[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]\nclass Responsable implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n\n    #[ORM\\Column(length: 180)]\n    private ?string $email = null;\n\n    /**\n     * @var list<string> The user roles\n     */\n    #[ORM\\Column]\n    private array $roles = [];\n\n        #[ORM\\Column(type: 'json')]\n    private array $roles = [];\n\n\n    /**\n     * @var string The hashed password\n     */\n    #[ORM\\Column]\n    private ?string $password = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $nom = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $prenom = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $roleResponsable = null;\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getEmail(): ?string\n    {\n        return $this->email;\n    }\n\n    public function setEmail(string $email): static\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n    /**\n     * A visual identifier that represents this user.\n     *\n     * @see UserInterface\n     */\n    public function getUserIdentifier(): string\n    {\n        return (string) $this->email;\n    }\n\n    /**\n     * @see UserInterface\n     */\n    public function getRoles(): array\n    {\n        $roles = $this->roles;\n        // guarantee every user at least has ROLE_USER\n        $roles[] = 'ROLE_USER';\n\n        return array_unique($roles);\n    }\n\n    /**\n     * @param list<string> $roles\n     */\n    public function setRoles(array $roles): static\n    {\n        $this->roles = $roles;\n\n        return $this;\n    }\n\n    /**\n     * @see PasswordAuthenticatedUserInterface\n     */\n    public function getPassword(): ?string\n    {\n        return $this->password;\n    }\n\n    public function setPassword(string $password): static\n    {\n        $this->password = $password;\n\n        return $this;\n    }\n\n    #[\\Deprecated]\n    public function eraseCredentials(): void\n    {\n        // @deprecated, to be removed when upgrading to Symfony 8\n    }\n\n    public function getNom(): ?string\n    {\n        return $this->nom;\n    }\n\n    public function setNom(string $nom): static\n    {\n        $this->nom = $nom;\n\n        return $this;\n    }\n\n    public function getPrenom(): ?string\n    {\n        return $this->prenom;\n    }\n\n    public function setPrenom(string $prenom): static\n    {\n        $this->prenom = $prenom;\n\n        return $this;\n    }\n\n    public function getRoleResponsable(): ?string\n    {\n        return $this->roleResponsable;\n    }\n\n    public function setRoleResponsable(string $roleResponsable): static\n    {\n        $this->roleResponsable = $roleResponsable;\n\n        return $this;\n    }\n}\n"
        }
    ]
}