{
    "sourceFile": "src/Entity/User.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1752138553906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752138566702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n use Symfony\\Component\\Validator\\Constraints as Assert;\r\n \r\n #[ORM\\Entity]\r\n-#[ORM\\Table(name: '`user`')]\r\n+#[ORM\\Table(name: '`user`')]\\__PHP_Incomplete_Class\r\n class User implements UserInterface\r\n {\r\n     #[ORM\\Id]\r\n     #[ORM\\GeneratedValue]\r\n"
                },
                {
                    "date": 1752138604000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,91 +4,42 @@\n use Doctrine\\ORM\\Mapping as ORM;\r\n use Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n use Symfony\\Component\\Validator\\Constraints as Assert;\r\n \r\n-#[ORM\\Entity]\r\n-#[ORM\\Table(name: '`user`')]\\__PHP_Incomplete_Class\r\n+/**\r\n+ * @ORM\\Entity\r\n+ * @ORM\\Table(name=\"`user`\")\r\n+ */\r\n class User implements UserInterface\r\n {\r\n-    #[ORM\\Id]\r\n-    #[ORM\\GeneratedValue]\r\n-    #[ORM\\Column(type:\"integer\")]\r\n-    private ?int $id = null;\r\n+    /**\r\n+     * @ORM\\Id\r\n+     * @ORM\\GeneratedValue\r\n+     * @ORM\\Column(type=\"integer\")\r\n+     */\r\n+    private $id;\r\n \r\n-    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n-    #[Assert\\NotBlank]\r\n-    private ?string $username = null;\r\n+    /**\r\n+     * @ORM\\Column(type=\"string\", length=180, unique=true)\r\n+     * @Assert\\NotBlank\r\n+     */\r\n+    private $username;\r\n \r\n-    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n-    #[Assert\\NotBlank]\r\n-    #[Assert\\Email]\r\n-    private ?string $email = null;\r\n+    /**\r\n+     * @ORM\\Column(type=\"string\", length=180, unique=true)\r\n+     * @Assert\\NotBlank\r\n+     * @Assert\\Email\r\n+     */\r\n+    private $email;\r\n \r\n-    #[ORM\\Column(type:\"json\")]\r\n-    private array $roles = [];\r\n+    /**\r\n+     * @ORM\\Column(type=\"json\")\r\n+     */\r\n+    private $roles = [];\r\n \r\n-    #[ORM\\Column(type:\"string\")]\r\n-    private ?string $password = null;\r\n+    /**\r\n+     * @ORM\\Column(type=\"string\")\r\n+     */\r\n+    private $password;\r\n \r\n-    public function getId(): ?int\r\n-    {\r\n-        return $this->id;\r\n-    }\r\n-\r\n-    public function getUsername(): ?string\r\n-    {\r\n-        return $this->username;\r\n-    }\r\n-\r\n-    public function setUsername(string $username): self\r\n-    {\r\n-        $this->username = $username;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getEmail(): ?string\r\n-    {\r\n-        return $this->email;\r\n-    }\r\n-\r\n-    public function setEmail(string $email): self\r\n-    {\r\n-        $this->email = $email;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getRoles(): array\r\n-    {\r\n-        $roles = $this->roles;\r\n-        // garantir que ROLE_USER est toujours présent\r\n-        $roles[] = 'ROLE_USER';\r\n-        return array_unique($roles);\r\n-    }\r\n-\r\n-    public function setRoles(array $roles): self\r\n-    {\r\n-        $this->roles = $roles;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getPassword(): ?string\r\n-    {\r\n-        return $this->password;\r\n-    }\r\n-\r\n-    public function setPassword(string $password): self\r\n-    {\r\n-        $this->password = $password;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getSalt(): ?string\r\n-    {\r\n-        // non utilisé avec bcrypt ou sodium\r\n-        return null;\r\n-    }\r\n-\r\n-    public function eraseCredentials()\r\n-    {\r\n-        // Si tu stockes temporairement des infos sensibles, vide-les ici\r\n-    }\r\n+    // ... getters et setters identiques à ta version attributs ...\r\n }\r\n"
                },
                {
                    "date": 1752138616389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +0,0 @@\n-<?php\r\n-namespace App\\Entity;\r\n-\r\n-use Doctrine\\ORM\\Mapping as ORM;\r\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n-use Symfony\\Component\\Validator\\Constraints as Assert;\r\n-\r\n-/**\r\n- * @ORM\\Entity\r\n- * @ORM\\Table(name=\"`user`\")\r\n- */\r\n-class User implements UserInterface\r\n-{\r\n-    /**\r\n-     * @ORM\\Id\r\n-     * @ORM\\GeneratedValue\r\n-     * @ORM\\Column(type=\"integer\")\r\n-     */\r\n-    private $id;\r\n-\r\n-    /**\r\n-     * @ORM\\Column(type=\"string\", length=180, unique=true)\r\n-     * @Assert\\NotBlank\r\n-     */\r\n-    private $username;\r\n-\r\n-    /**\r\n-     * @ORM\\Column(type=\"string\", length=180, unique=true)\r\n-     * @Assert\\NotBlank\r\n-     * @Assert\\Email\r\n-     */\r\n-    private $email;\r\n-\r\n-    /**\r\n-     * @ORM\\Column(type=\"json\")\r\n-     */\r\n-    private $roles = [];\r\n-\r\n-    /**\r\n-     * @ORM\\Column(type=\"string\")\r\n-     */\r\n-    private $password;\r\n-\r\n-    // ... getters et setters identiques à ta version attributs ...\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752138653224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,96 @@\n-\n+<?php\r\n+namespace App\\Entity;\r\n+\r\n+use Doctrine\\ORM\\Mapping as ORM;\r\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n+use Symfony\\Component\\Validator\\Constraints as Assert;\r\n+\r\n+#[ORM\\Entity]\r\n+#[ORM\\Table(name: '`user`')]\r\n+class User implements UserInterface\r\n+{\r\n+    #[ORM\\Id]\r\n+    #[ORM\\GeneratedValue]\r\n+    #[ORM\\Column(type:\"integer\")]\r\n+    private ?int $id = null;\r\n+\r\n+    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n+    #[Assert\\NotBlank(message: \"Le nom d'utilisateur ne peut pas être vide.\")]\r\n+    private ?string $username = null;\r\n+\r\n+    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n+    #[Assert\\NotBlank(message: \"L'email ne peut pas être vide.\")]\r\n+    #[Assert\\Email(message: \"L'adresse email '{{ value }}' n'est pas valide.\")]\r\n+    private ?string $email = null;\r\n+\r\n+    #[ORM\\Column(type:\"json\")]\r\n+    private array $roles = [];\r\n+\r\n+    #[ORM\\Column(type:\"string\")]\r\n+    #[Assert\\NotBlank(message: \"Le mot de passe ne peut pas être vide.\")]\r\n+    private ?string $password = null;\r\n+\r\n+    public function getId(): ?int\r\n+    {\r\n+        return $this->id;\r\n+    }\r\n+\r\n+    public function getUsername(): ?string\r\n+    {\r\n+        return $this->username;\r\n+    }\r\n+\r\n+    public function setUsername(string $username): self\r\n+    {\r\n+        $this->username = $username;\r\n+        return $this;\r\n+    }\r\n+\r\n+    public function getEmail(): ?string\r\n+    {\r\n+        return $this->email;\r\n+    }\r\n+\r\n+    public function setEmail(string $email): self\r\n+    {\r\n+        $this->email = $email;\r\n+        return $this;\r\n+    }\r\n+\r\n+    public function getRoles(): array\r\n+    {\r\n+        $roles = $this->roles;\r\n+        // Toujours garantir ROLE_USER\r\n+        $roles[] = 'ROLE_USER';\r\n+\r\n+        return array_unique($roles);\r\n+    }\r\n+\r\n+    public function setRoles(array $roles): self\r\n+    {\r\n+        $this->roles = $roles;\r\n+        return $this;\r\n+    }\r\n+\r\n+    public function getPassword(): ?string\r\n+    {\r\n+        return $this->password;\r\n+    }\r\n+\r\n+    public function setPassword(string $password): self\r\n+    {\r\n+        $this->password = $password;\r\n+        return $this;\r\n+    }\r\n+\r\n+    public function getSalt(): ?string\r\n+    {\r\n+        // Non nécessaire avec bcrypt ou sodium\r\n+        return null;\r\n+    }\r\n+\r\n+    public function eraseCredentials(): void\r\n+    {\r\n+        // Si tu stockes temporairement des infos sensibles, efface-les ici\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1752138675978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n use Doctrine\\ORM\\Mapping as ORM;\r\n use Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n use Symfony\\Component\\Validator\\Constraints as Assert;\r\n \r\n+\r\n #[ORM\\Entity]\r\n #[ORM\\Table(name: '`user`')]\r\n class User implements UserInterface\r\n {\r\n"
                },
                {
                    "date": 1752138693810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +0,0 @@\n-<?php\r\n-namespace App\\Entity;\r\n-\r\n-use Doctrine\\ORM\\Mapping as ORM;\r\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n-use Symfony\\Component\\Validator\\Constraints as Assert;\r\n-\r\n-\r\n-#[ORM\\Entity]\r\n-#[ORM\\Table(name: '`user`')]\r\n-class User implements UserInterface\r\n-{\r\n-    #[ORM\\Id]\r\n-    #[ORM\\GeneratedValue]\r\n-    #[ORM\\Column(type:\"integer\")]\r\n-    private ?int $id = null;\r\n-\r\n-    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n-    #[Assert\\NotBlank(message: \"Le nom d'utilisateur ne peut pas être vide.\")]\r\n-    private ?string $username = null;\r\n-\r\n-    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n-    #[Assert\\NotBlank(message: \"L'email ne peut pas être vide.\")]\r\n-    #[Assert\\Email(message: \"L'adresse email '{{ value }}' n'est pas valide.\")]\r\n-    private ?string $email = null;\r\n-\r\n-    #[ORM\\Column(type:\"json\")]\r\n-    private array $roles = [];\r\n-\r\n-    #[ORM\\Column(type:\"string\")]\r\n-    #[Assert\\NotBlank(message: \"Le mot de passe ne peut pas être vide.\")]\r\n-    private ?string $password = null;\r\n-\r\n-    public function getId(): ?int\r\n-    {\r\n-        return $this->id;\r\n-    }\r\n-\r\n-    public function getUsername(): ?string\r\n-    {\r\n-        return $this->username;\r\n-    }\r\n-\r\n-    public function setUsername(string $username): self\r\n-    {\r\n-        $this->username = $username;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getEmail(): ?string\r\n-    {\r\n-        return $this->email;\r\n-    }\r\n-\r\n-    public function setEmail(string $email): self\r\n-    {\r\n-        $this->email = $email;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getRoles(): array\r\n-    {\r\n-        $roles = $this->roles;\r\n-        // Toujours garantir ROLE_USER\r\n-        $roles[] = 'ROLE_USER';\r\n-\r\n-        return array_unique($roles);\r\n-    }\r\n-\r\n-    public function setRoles(array $roles): self\r\n-    {\r\n-        $this->roles = $roles;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getPassword(): ?string\r\n-    {\r\n-        return $this->password;\r\n-    }\r\n-\r\n-    public function setPassword(string $password): self\r\n-    {\r\n-        $this->password = $password;\r\n-        return $this;\r\n-    }\r\n-\r\n-    public function getSalt(): ?string\r\n-    {\r\n-        // Non nécessaire avec bcrypt ou sodium\r\n-        return null;\r\n-    }\r\n-\r\n-    public function eraseCredentials(): void\r\n-    {\r\n-        // Si tu stockes temporairement des infos sensibles, efface-les ici\r\n-    }\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752138739504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,97 @@\n+<?php\n+namespace App\\Entity;\n \n+use Doctrine\\ORM\\Mapping as ORM;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n+use Symfony\\Component\\Validator\\Constraints as Assert;\n+\n+\n+#[ORM\\Entity]\n+#[ORM\\Table(name: '`user`')]\n+class User implements UserInterface\n+{\n+    #[ORM\\Id]\n+    #[ORM\\GeneratedValue]\n+    #[ORM\\Column(type:\"integer\")]\n+    private ?int $id = null;\n+\n+    #[ORM\\Column(type:\"string\", length:180, unique:true)]\n+    #[Assert\\NotBlank(message: \"Le nom d'utilisateur ne peut pas être vide.\")]\n+    private ?string $username = null;\n+\n+    #[ORM\\Column(type:\"string\", length:180, unique:true)]\n+    #[Assert\\NotBlank(message: \"L'email ne peut pas être vide.\")]\n+    #[Assert\\Email(message: \"L'adresse email '{{ value }}' n'est pas valide.\")]\n+    private ?string $email = null;\n+\n+    #[ORM\\Column(type:\"json\")]\n+    private array $roles = [];\n+\n+    #[ORM\\Column(type:\"string\")]\n+    #[Assert\\NotBlank(message: \"Le mot de passe ne peut pas être vide.\")]\n+    private ?string $password = null;\n+\n+    public function getId(): ?int\n+    {\n+        return $this->id;\n+    }\n+\n+    public function getUsername(): ?string\n+    {\n+        return $this->username;\n+    }\n+\n+    public function setUsername(string $username): self\n+    {\n+        $this->username = $username;\n+        return $this;\n+    }\n+\n+    public function getEmail(): ?string\n+    {\n+        return $this->email;\n+    }\n+\n+    public function setEmail(string $email): self\n+    {\n+        $this->email = $email;\n+        return $this;\n+    }\n+\n+    public function getRoles(): array\n+    {\n+        $roles = $this->roles;\n+        // Toujours garantir ROLE_USER\n+        $roles[] = 'ROLE_USER';\n+\n+        return array_unique($roles);\n+    }\n+\n+    public function setRoles(array $roles): self\n+    {\n+        $this->roles = $roles;\n+        return $this;\n+    }\n+\n+    public function getPassword(): ?string\n+    {\n+        return $this->password;\n+    }\n+\n+    public function setPassword(string $password): self\n+    {\n+        $this->password = $password;\n+        return $this;\n+    }\n+\n+    public function getSalt(): ?string\n+    {\n+        // Non nécessaire avec bcrypt ou sodium\n+        return null;\n+    }\n+\n+    public function eraseCredentials(): void\n+    {\n+        // Si tu stockes temporairement des infos sensibles, efface-les ici\n+    }\n+}\n"
                },
                {
                    "date": 1752138755303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,13 @@\n <?php\n+\n namespace App\\Entity;\n \n+use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n-use Symfony\\Component\\Validator\\Constraints as Assert;\n \n-\n-#[ORM\\Entity]\n-#[ORM\\Table(name: '`user`')]\n-class User implements UserInterface\n+#[ORM\\Entity(repositoryClass: UserRepository::class)]\n+class User\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column(type:\"integer\")]\n@@ -93,5 +91,5 @@\n     public function eraseCredentials(): void\n     {\n         // Si tu stockes temporairement des infos sensibles, efface-les ici\n     }\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752138845704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,13 @@\n namespace App\\Entity;\n \n use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface; // <-- ajouter cet import\n+use Symfony\\Component\\Validator\\Constraints as Assert;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n-class User\n+class User implements UserInterface // <-- implémente UserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column(type:\"integer\")]\n@@ -91,5 +93,5 @@\n     public function eraseCredentials(): void\n     {\n         // Si tu stockes temporairement des infos sensibles, efface-les ici\n     }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1752139228298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,11 @@\n namespace App\\Entity;\n \n use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface; // <-- ajouter cet import\n-use Symfony\\Component\\Validator\\Constraints as Assert;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n-class User implements UserInterface // <-- implémente UserInterface\n+class User\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column(type:\"integer\")]\n@@ -93,5 +91,5 @@\n     public function eraseCredentials(): void\n     {\n         // Si tu stockes temporairement des infos sensibles, efface-les ici\n     }\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752139273878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,13 @@\n namespace App\\Entity;\n \n use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface; // <-- ajouter cet import\n+use Symfony\\Component\\Validator\\Constraints as Assert;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n-class User\n+class User implements UserInterface // <-- implémente UserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n     #[ORM\\Column(type:\"integer\")]\n@@ -91,5 +93,5 @@\n     public function eraseCredentials(): void\n     {\n         // Si tu stockes temporairement des infos sensibles, efface-les ici\n     }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1752147795912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,72 +3,87 @@\n namespace App\\Entity;\n \n use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n-use Symfony\\Component\\Security\\Core\\User\\UserInterface; // <-- ajouter cet import\n+use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n+use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n use Symfony\\Component\\Validator\\Constraints as Assert;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n-class User implements UserInterface // <-- implémente UserInterface\n+#[ORM\\Table(name: '`user`')]\n+#[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]\n+class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n-    #[ORM\\Column(type:\"integer\")]\n+    #[ORM\\Column(type: 'integer')]\n     private ?int $id = null;\n \n-    #[ORM\\Column(type:\"string\", length:180, unique:true)]\n-    #[Assert\\NotBlank(message: \"Le nom d'utilisateur ne peut pas être vide.\")]\n-    private ?string $username = null;\n-\n-    #[ORM\\Column(type:\"string\", length:180, unique:true)]\n+    #[ORM\\Column(length: 180, unique: true)]\n     #[Assert\\NotBlank(message: \"L'email ne peut pas être vide.\")]\n     #[Assert\\Email(message: \"L'adresse email '{{ value }}' n'est pas valide.\")]\n     private ?string $email = null;\n \n-    #[ORM\\Column(type:\"json\")]\n+    #[ORM\\Column(length: 180, unique: true)]\n+    #[Assert\\NotBlank(message: \"Le nom d'utilisateur ne peut pas être vide.\")]\n+    private ?string $username = null;\n+\n+    /**\n+     * @var list<string> The user roles\n+     */\n+    #[ORM\\Column(type: 'json')]\n     private array $roles = [];\n \n-    #[ORM\\Column(type:\"string\")]\n+    /**\n+     * @var string The hashed password\n+     */\n+    #[ORM\\Column]\n     #[Assert\\NotBlank(message: \"Le mot de passe ne peut pas être vide.\")]\n     private ?string $password = null;\n \n     public function getId(): ?int\n     {\n         return $this->id;\n     }\n \n-    public function getUsername(): ?string\n+    public function getEmail(): ?string\n     {\n-        return $this->username;\n+        return $this->email;\n     }\n \n-    public function setUsername(string $username): self\n+    public function setEmail(string $email): static\n     {\n-        $this->username = $username;\n+        $this->email = $email;\n         return $this;\n     }\n \n-    public function getEmail(): ?string\n+    public function getUsername(): ?string\n     {\n-        return $this->email;\n+        return $this->username;\n     }\n \n-    public function setEmail(string $email): self\n+    public function setUsername(string $username): static\n     {\n-        $this->email = $email;\n+        $this->username = $username;\n         return $this;\n     }\n \n+    /**\n+     * Un identifiant visuel pour représenter cet utilisateur.\n+     */\n+    public function getUserIdentifier(): string\n+    {\n+        return (string) $this->email;\n+    }\n+\n     public function getRoles(): array\n     {\n         $roles = $this->roles;\n-        // Toujours garantir ROLE_USER\n         $roles[] = 'ROLE_USER';\n-\n         return array_unique($roles);\n     }\n \n-    public function setRoles(array $roles): self\n+    public function setRoles(array $roles): static\n     {\n         $this->roles = $roles;\n         return $this;\n     }\n@@ -77,21 +92,15 @@\n     {\n         return $this->password;\n     }\n \n-    public function setPassword(string $password): self\n+    public function setPassword(string $password): static\n     {\n         $this->password = $password;\n         return $this;\n     }\n \n-    public function getSalt(): ?string\n-    {\n-        // Non nécessaire avec bcrypt ou sodium\n-        return null;\n-    }\n-\n     public function eraseCredentials(): void\n     {\n-        // Si tu stockes temporairement des infos sensibles, efface-les ici\n+        // À utiliser si tu stockes des données temporaires sensibles\n     }\n }\n"
                },
                {
                    "date": 1752148213850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,40 +5,31 @@\n use App\\Repository\\UserRepository;\n use Doctrine\\ORM\\Mapping as ORM;\n use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n use Symfony\\Component\\Security\\Core\\User\\UserInterface;\n-use Symfony\\Component\\Validator\\Constraints as Assert;\n \n #[ORM\\Entity(repositoryClass: UserRepository::class)]\n-#[ORM\\Table(name: '`user`')]\n #[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]\n class User implements UserInterface, PasswordAuthenticatedUserInterface\n {\n     #[ORM\\Id]\n     #[ORM\\GeneratedValue]\n-    #[ORM\\Column(type: 'integer')]\n+    #[ORM\\Column]\n     private ?int $id = null;\n \n-    #[ORM\\Column(length: 180, unique: true)]\n-    #[Assert\\NotBlank(message: \"L'email ne peut pas être vide.\")]\n-    #[Assert\\Email(message: \"L'adresse email '{{ value }}' n'est pas valide.\")]\n+    #[ORM\\Column(length: 180)]\n     private ?string $email = null;\n \n-    #[ORM\\Column(length: 180, unique: true)]\n-    #[Assert\\NotBlank(message: \"Le nom d'utilisateur ne peut pas être vide.\")]\n-    private ?string $username = null;\n-\n     /**\n      * @var list<string> The user roles\n      */\n-    #[ORM\\Column(type: 'json')]\n+    #[ORM\\Column]\n     private array $roles = [];\n \n     /**\n      * @var string The hashed password\n      */\n     #[ORM\\Column]\n-    #[Assert\\NotBlank(message: \"Le mot de passe ne peut pas être vide.\")]\n     private ?string $password = null;\n \n     public function getId(): ?int\n     {\n@@ -52,55 +43,61 @@\n \n     public function setEmail(string $email): static\n     {\n         $this->email = $email;\n-        return $this;\n-    }\n \n-    public function getUsername(): ?string\n-    {\n-        return $this->username;\n-    }\n-\n-    public function setUsername(string $username): static\n-    {\n-        $this->username = $username;\n         return $this;\n     }\n \n     /**\n-     * Un identifiant visuel pour représenter cet utilisateur.\n+     * A visual identifier that represents this user.\n+     *\n+     * @see UserInterface\n      */\n     public function getUserIdentifier(): string\n     {\n         return (string) $this->email;\n     }\n \n+    /**\n+     * @see UserInterface\n+     */\n     public function getRoles(): array\n     {\n         $roles = $this->roles;\n+        // guarantee every user at least has ROLE_USER\n         $roles[] = 'ROLE_USER';\n+\n         return array_unique($roles);\n     }\n \n+    /**\n+     * @param list<string> $roles\n+     */\n     public function setRoles(array $roles): static\n     {\n         $this->roles = $roles;\n+\n         return $this;\n     }\n \n+    /**\n+     * @see PasswordAuthenticatedUserInterface\n+     */\n     public function getPassword(): ?string\n     {\n         return $this->password;\n     }\n \n     public function setPassword(string $password): static\n     {\n         $this->password = $password;\n+\n         return $this;\n     }\n \n+    #[\\Deprecated]\n     public function eraseCredentials(): void\n     {\n-        // À utiliser si tu stockes des données temporaires sensibles\n+        // @deprecated, to be removed when upgrading to Symfony 8\n     }\n }\n"
                }
            ],
            "date": 1752138553906,
            "name": "Commit-0",
            "content": "<?php\r\nnamespace App\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\n\r\n#[ORM\\Entity]\r\n#[ORM\\Table(name: '`user`')]\r\nclass User implements UserInterface\r\n{\r\n    #[ORM\\Id]\r\n    #[ORM\\GeneratedValue]\r\n    #[ORM\\Column(type:\"integer\")]\r\n    private ?int $id = null;\r\n\r\n    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n    #[Assert\\NotBlank]\r\n    private ?string $username = null;\r\n\r\n    #[ORM\\Column(type:\"string\", length:180, unique:true)]\r\n    #[Assert\\NotBlank]\r\n    #[Assert\\Email]\r\n    private ?string $email = null;\r\n\r\n    #[ORM\\Column(type:\"json\")]\r\n    private array $roles = [];\r\n\r\n    #[ORM\\Column(type:\"string\")]\r\n    private ?string $password = null;\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function getUsername(): ?string\r\n    {\r\n        return $this->username;\r\n    }\r\n\r\n    public function setUsername(string $username): self\r\n    {\r\n        $this->username = $username;\r\n        return $this;\r\n    }\r\n\r\n    public function getEmail(): ?string\r\n    {\r\n        return $this->email;\r\n    }\r\n\r\n    public function setEmail(string $email): self\r\n    {\r\n        $this->email = $email;\r\n        return $this;\r\n    }\r\n\r\n    public function getRoles(): array\r\n    {\r\n        $roles = $this->roles;\r\n        // garantir que ROLE_USER est toujours présent\r\n        $roles[] = 'ROLE_USER';\r\n        return array_unique($roles);\r\n    }\r\n\r\n    public function setRoles(array $roles): self\r\n    {\r\n        $this->roles = $roles;\r\n        return $this;\r\n    }\r\n\r\n    public function getPassword(): ?string\r\n    {\r\n        return $this->password;\r\n    }\r\n\r\n    public function setPassword(string $password): self\r\n    {\r\n        $this->password = $password;\r\n        return $this;\r\n    }\r\n\r\n    public function getSalt(): ?string\r\n    {\r\n        // non utilisé avec bcrypt ou sodium\r\n        return null;\r\n    }\r\n\r\n    public function eraseCredentials()\r\n    {\r\n        // Si tu stockes temporairement des infos sensibles, vide-les ici\r\n    }\r\n}\r\n"
        }
    ]
}