{
    "sourceFile": "src/Controller/SecurityController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752135336790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752141666741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +0,0 @@\n-<?php\n-\n-namespace App\\Controller;\n-\n-use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n-use Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\n-use Symfony\\Component\\Routing\\Annotation\\Route;\n-\n-class SecurityController extends AbstractController\n-{\n-    #[Route('/login', name: 'login')]\n-    public function login(AuthenticationUtils $authenticationUtils)\n-    {\n-        if ($this->getUser()) {\n-            return $this->redirectToRoute('dashboard');\n-        }\n-\n-        // get the login error if there is one\n-        $error = $authenticationUtils->getLastAuthenticationError();\n-\n-        // last username entered by the user\n-        $lastUsername = $authenticationUtils->getLastUsername();\n-\n-        return $this->render('security/login.html.twig', [\n-            'last_username' => $lastUsername,\n-            'error' => $error,\n-        ]);\n-    }\n-\n-    #[Route('/logout', name: 'logout')]\n-    public function logout()\n-    {\n-        // controller can be blank: handled by Symfony\n-    }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752141698337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,35 @@\n+<?php\n \n+namespace App\\Controller;\n+\n+use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n+use Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\n+use Symfony\\Component\\Routing\\Annotation\\Route;\n+\n+class SecurityController extends AbstractController\n+{\n+    #[Route('/login', name: 'login')]\n+    public function login(AuthenticationUtils $authenticationUtils)\n+    {\n+        if ($this->getUser()) {\n+            return $this->redirectToRoute('dashboard');\n+        }\n+\n+        // get the login error if there is one\n+        $error = $authenticationUtils->getLastAuthenticationError();\n+\n+        // last username entered by the user\n+        $lastUsername = $authenticationUtils->getLastUsername();\n+\n+        return $this->render('security/login.html.twig', [\n+            'last_username' => $lastUsername,\n+            'error' => $error,\n+        ]);\n+    }\n+\n+    #[Route('/logout', name: 'logout')]\n+    public function logout()\n+    {\n+        // controller can be blank: handled by Symfony\n+    }\n+}\n"
                },
                {
                    "date": 1752145740977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,34 @@\n <?php\n+// src/Controller/SecurityController.php\n \n namespace App\\Controller;\n \n use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n+use Symfony\\Component\\HttpFoundation\\Request;\n+use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n \n class SecurityController extends AbstractController\n {\n-    #[Route('/login', name: 'login')]\n-    public function login(AuthenticationUtils $authenticationUtils)\n+    #[Route(path: '/login', name: 'login')]\n+    public function login(AuthenticationUtils $authenticationUtils): Response\n     {\n-        if ($this->getUser()) {\n-            return $this->redirectToRoute('dashboard');\n-        }\n-\n-        // get the login error if there is one\n+        // Récupère une erreur de login si elle existe\n         $error = $authenticationUtils->getLastAuthenticationError();\n-\n-        // last username entered by the user\n+        // Dernier nom d’utilisateur saisi\n         $lastUsername = $authenticationUtils->getLastUsername();\n \n         return $this->render('security/login.html.twig', [\n             'last_username' => $lastUsername,\n             'error' => $error,\n         ]);\n     }\n \n-    #[Route('/logout', name: 'logout')]\n-    public function logout()\n+    #[Route(path: '/logout', name: 'logout')]\n+    public function logout(): void\n     {\n-        // controller can be blank: handled by Symfony\n+        // Cette méthode peut rester vide, Symfony interceptera la route\n+        throw new \\Exception('Cette méthode doit être vide - elle est interceptée par le firewall');\n     }\n }\n"
                }
            ],
            "date": 1752135336790,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass SecurityController extends AbstractController\n{\n    #[Route('/login', name: 'login')]\n    public function login(AuthenticationUtils $authenticationUtils)\n    {\n        if ($this->getUser()) {\n            return $this->redirectToRoute('dashboard');\n        }\n\n        // get the login error if there is one\n        $error = $authenticationUtils->getLastAuthenticationError();\n\n        // last username entered by the user\n        $lastUsername = $authenticationUtils->getLastUsername();\n\n        return $this->render('security/login.html.twig', [\n            'last_username' => $lastUsername,\n            'error' => $error,\n        ]);\n    }\n\n    #[Route('/logout', name: 'logout')]\n    public function logout()\n    {\n        // controller can be blank: handled by Symfony\n    }\n}\n"
        }
    ]
}