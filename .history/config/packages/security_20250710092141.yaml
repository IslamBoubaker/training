security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\Responsable:
            algorithm: auto
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Responsable
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
            logout:
                path: logout
                target: /

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Accès public
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/public, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Visiteur : accès général
        - { path: ^/, roles: ROLE_VISITEUR }

        # Client
        - { path: ^/client, roles: ROLE_CLIENT }

        # Responsable Catalogue
        - { path: ^/catalogue, roles: ROLE_RESPONSABLE_CATALOGUE }

        # Responsable Logistique
        - { path: ^/logistique, roles: ROLE_RESPONSABLE_LOGISTIQUE }

        # Responsable Formation Inter
        - { path: ^/formation-inter, roles: ROLE_RESPONSABLE_FORMATION_INTER }

        # Admin - accès sur tout
        - { path: ^/admin, roles: ROLE_ADMIN }
    role_hierarchy:
    ROLE_ADMIN:       [ROLE_RESPONSABLE_CATALOGUE, ROLE_RESPONSABLE_LOGISTIQUE, ROLE_RESPONSABLE_FORMATION_INTER, ROLE_CLIENT, ROLE_VISITEUR]
    ROLE_RESPONSABLE_CATALOGUE: [ROLE_CLIENT, ROLE_VISITEUR]
    ROLE_RESPONSABLE_LOGISTIQUE: [ROLE_CLIENT, ROLE_VISITEUR]
    ROLE_RESPONSABLE_FORMATION_INTER: [ROLE_CLIENT, ROLE_VISITEUR]
    ROLE_CLIENT:      [ROLE_VISITEUR]



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
